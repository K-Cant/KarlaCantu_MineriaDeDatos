# -*- coding: utf-8 -*-
"""LinearModels.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Dhe1NPtyF9aud8K5gwd69KC82oXRMc6P

## Practica 5: Linear Models + correlation

Genere un modelo lineal a partir de sus datos, cree los gráficos necesarios y obtenga su puntuación R2.

### Lectura del CSV
"""

import pandas as pd

df = pd.read_csv("datos_limpios.csv")
df.info()

"""### Modelo lineal

Excluimos columnas que no tendrán relevancia futura
"""

columnas = ["Booking ID", "Booking Status", "Customer ID"]
df.drop(columns = columnas, inplace = True)
df.info()

"""Conversión de datetime a formato correcto"""

df['Datetime'] = pd.to_datetime(df['Datetime'])
df['Day'] = df['Datetime'].dt.dayofweek
df['Hour'] = df['Datetime'].dt.hour
df['Weekend'] = np.where(df['Day'].isin([5, 6]), 1, 0) # 1 -> weekend

"""Creación del Modelo lineal"""

import numpy as np

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score

def linear_model(df, X_cols_categorical, X_cols_numerical):
  X = df[X_cols_categorical + X_cols_numerical]
  y = df["Booking Value"]

  X_encoded = pd.get_dummies(X, columns=X_cols_categorical, drop_first=True)

  X_train, X_test, y_train, y_test = train_test_split(X_encoded, y, test_size=0.2, random_state=42)

  model = LinearRegression()
  model.fit(X_train, y_train)

  y_pred = model.predict(X_test)

  return y_test, y_pred

X_cols_categorical = ["Vehicle Type", "Pickup Location", "Drop Location", "Day", "Hour", "Weekend"]
X_cols_numerical = ["Ride Distance"]

y_test, y_pred = linear_model(X_cols_categorical, X_cols_numerical)

print(f"R2 score: {r2_score(y_test, y_pred):.4f}")

"""Un coeficiente de determinación de 0.05 no es exactamente bueno, así que vamos a cambiar algunas cosas. Por ejemplo, disminuir las variables independientes, eliminando Pickup Location y Drop Location"""

X_cols2_categorical = ["Vehicle Type", "Day", "Hour", "Weekend"]
X_cols2_numerical = ["Ride Distance"]
y_test2, y_pred2 = linear_model(df, X_cols2_categorical, X_cols2_numerical)

print(f"R2 score: {r2_score(y_test2, y_pred2):.4f}")

"""Si eliminamos Vehicle Type"""

X_cols3_categorical = ["Day", "Hour", "Weekend"]
X_cols3_numerical = ["Ride Distance"]
y_test3, y_pred3 = linear_model(df, X_cols3_categorical, X_cols3_numerical)

print(f"R2 score: {r2_score(y_test3, y_pred3):.4f}")

"""No existe relación lineal."""

import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(8,6))
sns.scatterplot(x=y_test, y=y_pred, alpha=0.6)
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], color='red', lw=2)

plt.xlabel("Valores Reales (y_test)")
plt.ylabel("Valores Predichos (y_pred)")
plt.grid(True, linestyle='--', alpha=0.7)
plt.show()